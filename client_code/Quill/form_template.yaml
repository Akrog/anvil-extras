properties:
- {name: enabled, type: boolean, default_value: true, default_binding_prop: true}
- {name: visible, type: boolean, default_value: true, default_binding_prop: false}
- {name: height, type: string, default_value: '150', default_binding_prop: false,
  description: If auto_expand is set to True this will be the min_height. otherwise it'll be the fixed height}
- {name: auto_expand, type: boolean, default_value: true, default_binding_prop: false,
  description: If set to True the height becomes the starting height}
- {name: readonly, type: boolean, default_value: false, default_binding_prop: false,
  description: Similar to enabled but cannot be updated}
- {name: toolbar, type: boolean, default_value: true, default_binding_prop: false,
  description: This must be set in the constructor and cannot be updated}
- {name: theme, type: string, default_value: snow, default_binding_prop: false, description: snow or bubble - check quill for the difference - cannot be updated once set}
- {name: placeholder, type: string, default_value: '', default_binding_prop: false,
  description: The text to display when there is not content}
- {name: content, type: string, default_binding_prop: false, description: A json-able object you can store as simple object in a data table cell. Use get_contents to interact with the quill delta object directly.,
  default_value: null}
- {name: spacing_above, type: string, default_value: small}
- {name: spacing_below, type: string, default_value: small}
is_package: true
events:
- {name: text_change, description: when the quill text changes, default: true}
- {name: selection_change, description: when the quill text selection changes, default: false}
- {name: show, description: when the component is shown, default: false}
- {name: hide, description: when the component is no longer on the screen, default: false}
custom_component: true
components: []
container:
  type: HtmlTemplate
  properties: {tooltip: '', background: '', foreground: '', border: '', visible: true,
    role: null, html: "<div class=\"quill-editor\" style=\"min-height:150px;\"></div>\n\
      <script>\nfunction updateDesignQuill(container, editor, props) {\n    props\
      \ ||\n        (props = {\n            auto_expand: true,\n            content:\
      \ \"\",\n            enabled: true,\n            height: 150,\n            placeholder:\
      \ null,\n            readonly: false,\n            spacing_above: \"small\"\
      ,\n            spacing_below: \"small\",\n            theme: \"snow\",\n   \
      \         toolbar: true,\n            visible: true,\n        });\n\n    if\
      \ (editor.firstElementChild) {\n        editor.removeChild(editor.firstElementChild);\
      \ // remove the editor and the toolabar\n    }\n    if (container.firstElementChild\
      \ !== editor) {\n        container.removeChild(container.firstElementChild);\
      \ // remove the toolbar\n    }\n    const q = new Quill(editor, {\n        modules:\
      \ { toolbar: props.toolbar || false },\n        readOnly: props.readonly,\n\
      \        theme: props.theme,\n        placeholder: props.placeholder,\n    });\n\
      \    const stale_spacing = [...container.classList].filter((x) => x.startsWith(\"\
      anvil-spacing-\"));\n    container.classList.remove(...stale_spacing);\n   \
      \ container.classList.add(\n        \"anvil-spacing-above-\" + props.spacing_above,\n\
      \        \"anvil-spacing-below-\" + props.spacing_below,\n    );\n    container.classList.toggle(\"\
      visible-false\", !props.visible);\n    let len = props.height;\n    len = (\"\
      \" + len).match(/[a-zA-Z%]/g) ? len : len + \"px\";\n    editor.style.minHeight\
      \ = len;\n    editor.style.height = props.auto_expand ? len : \"auto\";\n  \
      \  q.setText(props.content || \"\");\n}\n\n  \nfunction addQuill() {\n    for\
      \ (let editor of document.querySelectorAll(\".quill-editor\")) {\n        const\
      \ container = editor.parentElement;\n        const py = $(container).data(\"\
      anvilPyComponent\");\n        const props = py._anvil.customPropVals;\n    \
      \    if (!editor.firstElementChild && props) {\n            // we've not been\
      \ here before\n            const copyProps = { ...props };\n            for\
      \ (let propName in copyProps) {\n                Object.defineProperty(props,\
      \ propName, {\n                    get() {\n                        return copyProps[propName];\n\
      \                    },\n                    set(v) {\n                    \
      \    copyProps[propName] = v;\n                        updateDesignQuill(container,\
      \ editor, copyProps);\n                    },\n                });\n       \
      \     }\n        }\n        updateDesignQuill(container, editor, props);\n \
      \   }\n}\n\n$(() => {\n    if (typeof Quill === \"undefined\") {\n        let\
      \ l = document.createElement(\"link\");\n        l.href = \"//cdn.quilljs.com/1.3.6/quill.snow.css\"\
      ;\n        l.rel = \"stylesheet\";\n        document.head.appendChild(l);\n\
      \        l = document.createElement(\"link\");\n        l.href = \"//cdn.quilljs.com/1.3.6/quill.bubble.css\"\
      ;\n        l.rel = \"stylesheet\";\n        document.head.appendChild(l);\n\n\
      \        const s = document.createElement(\"script\");\n        s.src = \"//cdn.quilljs.com/1.3.6/quill.min.js\"\
      ;\n        document.body.appendChild(s);\n        s.onload = addQuill;\n   \
      \ } else {\n        addQuill();\n    }\n});\n\n</script>\n"}
