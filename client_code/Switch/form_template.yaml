properties:
- {name: checked, type: boolean, default_value: false, default_binding_prop: true}
- {name: checked_color, type: color, default_value: null}
- {name: enabled, type: boolean, default_value: true}
- {name: foreground, type: color, default_value: null}
- {name: background, type: color, default_value: null}
- {name: font_size, type: number, default_value: 14}
- {name: bold, type: boolean, default_value: null}
- {name: italic, type: boolean, default_value: null}
- {name: text_pre, type: string, default_value: ''}
- {name: text_post, type: string, default_value: ''}
- {name: spacing_above, type: string, default_value: small}
- {name: spacing_below, type: string, default_value: small}
- {name: tooltip, type: string, default_value: ''}
- {name: visible, type: boolean, default_value: true}
is_package: true
events:
- {name: change, default_event: true, description: when this switch is checked or unchecked}
- {name: show, description: when this switch is shown}
- {name: hide, description: when this switch is hidden}
custom_component: true
components:
- type: CheckBox
  properties: {role: switch, align: left, tooltip: '', border: '', enabled: true,
    foreground: '', visible: true, text: '', font_size: null, font: '', spacing_above: small,
    spacing_below: small, italic: false, background: '', bold: false, checked: false,
    underline: false}
  name: check_box_1
  layout_properties: {slot: default}
  event_bindings: {change: check_box_1_change}
container:
  type: HtmlTemplate
  properties: {tooltip: '', background: '', foreground: '', border: '', visible: true,
    role: switch, html: "<div class=\"anvil-extras-switch\"></div>\n\n<script>\nfunction\
      \ _colorToRGB(v) {\n    if (v && v.startsWith(\"theme:\")) {\n        v = window.anvilThemeColors[v.replace(\"\
      theme:\", \"\")];\n    }\n    v = v || window.anvilThemeColors[\"Primary 500\"\
      ] || \"#2196F3\";\n    const bigint = parseInt(v.slice(1), 16);\n    v = [(bigint\
      \ >> 16) & 255, (bigint >> 8) & 255, bigint & 255].join(\",\");\n    return\
      \ v;\n}\n$(() => {\n    if (typeof window.anvilSwitchStyle === \"undefined\"\
      ) {\n        const s = document.createElement(\"style\");\n        s.innerHTML\
      \ = `.switch,.switch *{-webkit-tap-highlight-color:transparent;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.switch\
      \ label{cursor:pointer}.switch label input[type=checkbox]{opacity:0;width:0;height:0}.switch\
      \ label input[type=checkbox]:checked+.lever{background-color:rgba(var(--color),\
      \ .5)}.switch label input[type=checkbox]:checked+.lever:after,.switch label\
      \ input[type=checkbox]:checked+.lever:before{left:18px}.switch label input[type=checkbox]:checked+.lever:after{background-color:rgb(var(--color))}.switch\
      \ label .lever{content:\"\";display:inline-block;position:relative;width:36px;height:14px;background-color:rgba(0,0,0,0.38);border-radius:15px;margin-right:10px;-webkit-transition:background\
      \ 0.3s ease;transition:background 0.3s ease;vertical-align:middle;margin:0 16px}.switch\
      \ label .lever:after,.switch label .lever:before{content:\"\";position:absolute;display:inline-block;width:20px;height:20px;border-radius:50%;left:0;top:-3px;-webkit-transition:left\
      \ 0.3s ease, background 0.3s ease, -webkit-box-shadow 0.1s ease, -webkit-transform\
      \ 0.1s ease;transition:left 0.3s ease, background 0.3s ease, -webkit-box-shadow\
      \ 0.1s ease, -webkit-transform 0.1s ease;transition:left 0.3s ease, background\
      \ 0.3s ease, box-shadow 0.1s ease, transform 0.1s ease;transition:left 0.3s\
      \ ease, background 0.3s ease, box-shadow 0.1s ease, transform 0.1s ease, -webkit-box-shadow\
      \ 0.1s ease, -webkit-transform 0.1s ease}.switch label .lever:before{background-color:rgb(var(--color),\
      \ 0.15)}.switch label .lever:after{background-color:#F1F1F1;-webkit-box-shadow:0\
      \ 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0 rgba(0,0,0,0.14),0px 1px 5px 0\
      \ rgba(0,0,0,0.12);box-shadow:0 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0 rgba(0,0,0,0.14),0px\
      \ 1px 5px 0 rgba(0,0,0,0.12)}input[type=checkbox]:checked:not(:disabled) ~ .lever:active::before,input[type=checkbox]:checked:not(:disabled).tabbed:focus\
      \ ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgb(var(--color),\
      \ 0.15)}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus\
      \ ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}.switch\
      \ input[type=checkbox][disabled]+.lever{cursor:default;background-color:rgba(0,0,0,0.12)}.switch\
      \ label input[type=checkbox][disabled]+.lever:after,.switch label input[type=checkbox][disabled]:checked+.lever:after{background-color:#949494}`;\n\
      \        document.body.appendChild(s);\n        window.anvilSwitchStyle = true;\n\
      \    }\n    for (element of document.querySelectorAll(\".anvil-extras-switch\"\
      )) {\n        const parent = element.parentElement;\n        parent.removeChild(element);\n\
      \        parent.style.width = \"100%\";\n        const pyComponent = $(parent).data(\"\
      anvilPyComponent\");\n        const cb = pyComponent._anvil.components[0].component;\n\
      \        domNode = cb._anvil.domNode;\n        domNode.style.setProperty(\"\
      --color\", _colorToRGB());\n        domNode.querySelector(\".checkbox\").classList.add(\"\
      switch\");\n        const span = domNode.querySelector(\"span\");\n        span.classList.add(\"\
      lever\");\n        span.removeAttribute(\"style\");\n        const label = domNode.querySelector(\"\
      label\");\n        const textnode_pre = document.createTextNode(\"\");\n   \
      \     const textnode_post = document.createTextNode(\"\");\n        label.prepend(textnode_pre);\n\
      \        label.append(textnode_post);\n        label.style.padding = \"7px 0\"\
      ;\n\n        const props = pyComponent._anvil.customPropVals || {};\n      \
      \  const copyProps = { ...props };\n\n        const setProp = (propName, v)\
      \ => {\n            try {\n                cb._anvil.setProp(propName, Sk.ffi.toPy(v));\n\
      \            } catch {\n                if (propName === \"checked_color\")\
      \ {\n                    cb._anvil.domNode.style.setProperty(\"--color\", _colorToRGB(v));\n\
      \                } else if (propName === \"text_pre\") {\n                 \
      \   textnode_pre.textContent = v;\n                } else {\n              \
      \      textnode_post.textContent = v;\n                }\n            }\n  \
      \      };\n\n        for (let propName in copyProps) {\n            setProp(propName,\
      \ copyProps[propName]);\n            Object.defineProperty(props, propName,\
      \ {\n                get() {\n                    return copyProps[propName];\n\
      \                },\n                set(v) {\n                    copyProps[propName]\
      \ = v;\n                    setProp(propName, copyProps[propName]);\n      \
      \          },\n            });\n        }\n    }\n});\n</script>\n"}
